// setup the scene
var scene = new THREE.Scene();
var camera = new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight, 0.1, 1000);
var renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
camera.position.z = 20;
camera.position.y = 3;
camera.lookAt(0,0,0);


let cityVals = [
    [1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1],
    [1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,4,4,0,0,4,4,0,1,0,0,1,0,4,4,0,0,4,4,0,0,1,1,0,0,4,4,0,0,4,4,0,1,0,0,1,0,4,4,0,0,4,4,0,0,1],
    [1,0,4,6,5,0,0,5,5,4,1,0,0,1,4,5,5,0,0,5,5,4,0,1,1,0,4,5,5,0,0,5,6,4,1,0,0,1,4,5,6,0,0,5,6,4,0,1],
    [1,0,4,6,0,0,0,0,5,4,1,0,0,1,4,6,0,0,0,0,6,4,0,1,1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,6,0,0,0,0,5,4,0,1],
    [1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,6,0,0,0,0,5,4,0,1,1,0,4,6,0,0,0,0,6,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1],
    [1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1,1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,6,0,0,0,0,5,4,0,1],
    [1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,6,0,0,0,0,5,4,0,1,1,0,4,6,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1],
    [1,0,4,6,6,0,0,5,5,4,1,0,0,1,4,5,5,0,0,5,5,4,0,1,1,0,4,5,6,0,0,5,5,4,1,0,0,1,4,5,5,0,0,5,6,4,0,1],
    [1,0,0,4,4,0,0,4,4,4,1,0,0,1,0,4,4,0,0,4,4,0,0,1,1,0,0,4,4,0,0,4,4,4,1,0,0,1,0,4,4,0,0,4,4,0,0,1],
    [0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,0,6,6,6,6,0,0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,0,6,6,6,6,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,6,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,6,0],
    [0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,6,6,6,6,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,6,6,6,6,0],
    [1,0,0,4,4,0,0,4,4,0,1,0,0,1,0,4,4,0,0,4,4,0,0,1,1,0,0,4,4,0,0,4,4,0,1,0,0,1,0,4,4,0,0,4,4,0,0,1],
    [1,0,4,6,5,0,0,6,5,4,1,0,0,1,4,5,5,0,0,5,6,4,0,1,1,0,4,5,5,0,0,5,5,4,1,0,0,1,4,6,5,0,0,5,5,4,0,1],
    [1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,6,0,0,0,0,5,4,0,1,1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,6,4,0,1],
    [1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1,1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1],
    [1,0,4,6,0,0,0,0,6,4,1,0,0,1,4,6,0,0,0,0,5,4,0,1,1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,6,0,0,0,0,5,4,0,1],
    [1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1,1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,6,4,0,1],
    [1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,6,4,0,1,1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1],
    [1,0,4,5,5,0,0,5,6,4,1,0,0,1,0,5,5,0,0,5,5,0,0,1,1,0,4,5,5,0,0,5,5,4,1,0,0,1,0,5,5,0,0,5,5,0,0,1],
    [1,0,0,4,4,0,0,4,4,0,1,0,0,1,0,4,4,0,0,4,4,0,0,1,1,0,0,4,4,0,0,4,4,0,1,0,0,1,0,4,4,0,0,4,4,0,0,1],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,6,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,6,0],
    [1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,4,4,0,0,4,4,0,1,0,0,1,0,4,4,0,0,4,4,0,0,1,1,0,0,4,4,0,0,4,4,0,1,0,0,1,0,4,4,0,0,4,4,0,0,1],
    [1,0,4,6,5,0,0,5,5,4,1,0,0,1,4,5,6,0,0,5,5,4,0,1,1,0,4,5,5,0,0,5,5,4,1,0,0,1,4,6,5,0,0,5,6,4,0,1],
    [1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,6,0,0,0,0,5,4,0,1,1,0,4,6,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1],
    [1,0,4,5,0,0,0,0,6,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1,1,0,4,6,0,0,0,0,5,4,1,0,0,1,4,6,0,0,0,0,5,4,0,1],
    [1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,6,0,0,0,0,5,4,0,1,1,0,4,5,0,0,0,0,6,4,1,0,0,1,4,5,0,0,0,0,6,4,0,1],
    [1,0,4,5,0,0,0,0,6,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1,1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,6,0,0,0,0,6,4,0,1],
    [1,0,4,6,5,0,0,5,5,4,1,0,0,1,4,5,5,0,0,5,6,4,0,1,1,0,4,5,5,0,0,5,5,4,1,0,0,1,4,5,5,0,0,5,5,4,0,1],
    [1,0,0,4,4,0,0,4,4,4,1,0,0,1,0,4,4,0,0,4,4,0,0,1,1,0,0,4,4,0,0,4,4,4,1,0,0,1,0,4,4,0,0,4,4,0,0,1],
    [0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,0,6,6,6,6,0,0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,0,6,6,6,6,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,12,8,6,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,12,8,6,0],
    [0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,6,6,6,6,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,6,6,6,6,0],
    [1,0,0,4,4,0,0,4,4,0,1,0,0,1,0,4,4,0,0,4,4,0,0,1,1,0,0,4,4,0,0,4,4,0,1,0,0,1,0,4,4,0,0,4,4,0,0,1],
    [1,0,4,5,5,0,0,5,5,4,1,0,0,1,4,5,5,0,0,5,5,4,0,1,1,0,4,5,5,0,0,5,6,4,1,0,0,1,4,5,5,0,0,5,5,4,0,1],
    [1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1,1,0,4,6,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1],
    [1,0,4,5,0,0,0,0,6,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1,1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,6,0,0,0,0,5,4,0,1],
    [1,0,4,6,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1,1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1],
    [1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1,1,0,4,6,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1],
    [1,0,4,5,0,0,0,0,6,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1,1,0,4,5,0,0,0,0,5,4,1,0,0,1,4,5,0,0,0,0,5,4,0,1],
    [1,0,4,5,6,0,0,5,5,4,1,0,0,1,0,5,5,0,0,5,5,0,0,1,1,0,4,5,5,0,0,5,5,4,1,0,0,1,0,5,5,0,0,5,5,0,0,1],
    [1,0,0,4,4,0,0,4,4,0,1,0,0,1,0,4,4,0,0,4,4,0,0,1,1,0,0,4,4,0,0,4,4,0,1,0,0,1,0,4,4,0,0,4,4,0,0,1],
    [1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1]
];

// PlaneGeometry
const mat = new THREE.MeshPhongMaterial({color:0x4f4f4f, Shininess:100, side:THREE.DoubleSide});
var planeSize = 48;
var p = new THREE.PlaneGeometry(planeSize, planeSize, 100, 100);
var plane = new THREE.Mesh(p, mat);
var planeCenter = new THREE.Vector3(0,-parseInt(planeSize/4),-planeSize/2);
plane.position.z = planeCenter.z;
plane.position.y = planeCenter.y;
plane.rotation.x = Math.PI/2;
scene.add(plane);

// add the lights all around the city
for(var a = 270; a < 270 * 2; a+=100) {
    var light = new THREE.PointLight(0xffffff, 1, planeSize * 1.5);
    light.position.set(
        planeSize * Math.cos(degrees_to_radians(a)),
        planeCenter.y + planeSize/2,
        planeCenter.z + planeSize * Math.sin(degrees_to_radians(a)));
    scene.add(light);
}

//make the camera able to rotate around the city
//based on the a,d keys
var angle = degrees_to_radians(270);
camera.position.x = planeSize * 1.2 * Math.cos(angle);
camera.position.z = planeCenter.z + planeSize * 1.2 * Math.sin(angle);
camera.position.y = 4;
camera.lookAt(0,0,planeCenter.z);
document.onkeypress =  function(event) {
    var x = event.key;
    if(x == 'a') {
        angle += 0.1;
    } else if (x == 'd') {
        angle -= 0.1;
    }
    camera.position.x = planeSize * 1.2 * Math.cos(angle);
    camera.position.z = planeCenter.z + planeSize * 1.2 * Math.sin(angle);
    camera.lookAt(0,0,planeCenter.z);
};




let i = 0;
for(var r = -planeSize/2; r < planeSize/2; r++) {
    let j = 0;
    for(var c = -planeSize/2; c < planeSize/2; c++) {
        var geometry = new THREE.BoxGeometry();
        var material = new THREE.MeshPhongMaterial({color:0x00ff00});
        material.needsUpdate = true;
        var cube = new THREE.Mesh(geometry, material);
        cube.position.z = planeCenter.z + c + cube.scale.z/2;
        cube.position.x = r + cube.scale.x / 2;
        let val = cityVals[i];
        let height = val[j];
        if (height === 0){
            j++;
            continue;
        }

        console.log(height);
        cube.scale.y = cityVals[i][j];



        cube.position.y = planeCenter.y + cube.scale.y / 2;

        scene.add(cube);
        j++;
    }
    i++;
}




function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
}
animate();

function degrees_to_radians(degrees)
{
    var pi = Math.PI;
    return degrees * (pi/180);
}